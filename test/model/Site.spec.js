/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2020 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js'
import ShopApi from '../../src/index'

let instance

beforeEach(() => {
    instance = new ShopApi.Site()
})

const getProperty = (object, getter, property) => {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') {
        return object[getter]()
    } else {
        return object[property]
    }
}

const setProperty = (object, setter, property, value) => {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') {
        object[setter](value)
    } else {
        object[property] = value
    }
}

describe('SiteModel', () => {
    it('should create an instance of SiteModel', () => {
        // uncomment below and update the code to test SiteModel
        // var instane = new ShopApi.Site()
        // expect(instance).to.be.a(ShopApi.Site);
    })

    it('should have the property allowedCurrencies (base name: "allowed_currencies")', () => {
        // uncomment below and update the code to test the property allowedCurrencies
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property allowedLocales (base name: "allowed_locales")', () => {
        // uncomment below and update the code to test the property allowedLocales
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property defaultCurrency (base name: "default_currency")', () => {
        // uncomment below and update the code to test the property defaultCurrency
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property defaultLocale (base name: "default_locale")', () => {
        // uncomment below and update the code to test the property defaultLocale
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpDisBaseUrl (base name: "http_dis_base_url")', () => {
        // uncomment below and update the code to test the property httpDisBaseUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpHostname (base name: "http_hostname")', () => {
        // uncomment below and update the code to test the property httpHostname
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpLibraryContentUrl (base name: "http_library_content_url")', () => {
        // uncomment below and update the code to test the property httpLibraryContentUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpSiteContentUrl (base name: "http_site_content_url")', () => {
        // uncomment below and update the code to test the property httpSiteContentUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpsDisBaseUrl (base name: "https_dis_base_url")', () => {
        // uncomment below and update the code to test the property httpsDisBaseUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpsHostname (base name: "https_hostname")', () => {
        // uncomment below and update the code to test the property httpsHostname
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpsLibraryContentUrl (base name: "https_library_content_url")', () => {
        // uncomment below and update the code to test the property httpsLibraryContentUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property httpsSiteContentUrl (base name: "https_site_content_url")', () => {
        // uncomment below and update the code to test the property httpsSiteContentUrl
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property id (base name: "id")', () => {
        // uncomment below and update the code to test the property id
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property name (base name: "name")', () => {
        // uncomment below and update the code to test the property name
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property status (base name: "status")', () => {
        // uncomment below and update the code to test the property status
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property timezone (base name: "timezone")', () => {
        // uncomment below and update the code to test the property timezone
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

    it('should have the property timezoneOffset (base name: "timezone_offset")', () => {
        // uncomment below and update the code to test the property timezoneOffset
        // var instane = new ShopApi.Site()
        // expect(instance).to.be();
    })

})
