/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2020 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
import expect from 'expect.js'
import ShopApi from '../../src/index'

import {clientId, proxyUrl, baseUrl} from '../config.json'
import * as utils from '../utils'

let instance
let client

before(() => {
    client = new ShopApi.ApiClient({
        basePath: `${baseUrl}`,
        defaultHeaders: {'x-dw-client-id': clientId}
    })
})

beforeEach(() => {
    instance = new ShopApi.GiftCertificateApi(client)
})

const getProperty = (object, getter, property) => {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
}

const setProperty = (object, setter, property, value) => {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
}

const VALID_CODE = 'DSIYIAYFARMJISZV'
const INVALID_CODE = 'AAAAAAAAAAAAAAAA'

describe('GiftCertificateApi', () => {

    describe('postGiftCertificate', () => {
        it('should return giftCertificate when calling postGiftCertificate with valid code.', () =>
            utils.getGuestUserAuth(client)
                .then(() =>
                    instance.postGiftCertificate({body: {gift_certificate_code: VALID_CODE}})
                        .then((giftCertificate) => {
                            expect(giftCertificate.masked_gift_certificate_code.slice(-4)).to.be(VALID_CODE.slice(-4))
                        })
                )
        )

        it('should return fault when calling postGiftCertificate with invalid code.', () =>
            utils.getGuestUserAuth(client)
                .then(() =>
                    instance.postGiftCertificate({body: {gift_certificate_code: INVALID_CODE}})
                        .catch((fault) => {
                            expect(fault.type).to.be('GiftCertificateNotFoundException')
                        })
                )
        )
    })

})
