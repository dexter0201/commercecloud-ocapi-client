/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2020 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
import expect from 'expect.js'
import ShopApi from '../../src/index'

import {clientId, proxyUrl, baseUrl} from '../config.json'
import * as utils from '../utils'

import * as dataSamples from '../samples'

let instance
let client
let newCustomer

before(() => {
    client = new ShopApi.ApiClient({
        basePath: `${baseUrl}`,
        defaultHeaders: {'x-dw-client-id': clientId}
    })
    return utils.getNewRegisteredUser(client)
        .then((customer) => {
            newCustomer = customer
            return Promise.resolve()
        })
})

beforeEach(() => {
    instance = new ShopApi.OrderSearchApi(client)
})

const getProperty = (object, getter, property) => {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
}

const setProperty = (object, setter, property, value) => {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
}

describe('OrderSearchApi', () => {

    describe('postOrderSearch', () => {
        // The below test will fault because the current user doesn't have access
        // to this endpoint with only JWT authentication.
        it('should call postOrderSearch successfully', () =>
            instance.postOrderSearch(dataSamples.validOrderSearchRequest)
                .catch((fault) => {
                    expect(fault.type).to.be('AccessWithoutUserForbiddenException')
                })
        )
    })

})
